on:
  push:
  pull_request:
  schedule:
    - cron:  '0 0 * * *'

jobs:
  install:
    name: Verify Build and Installation
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - run: python3 setup.py install
        #
        # The statement below is used for debugging the Github job.
        #
      - run: python3 --version
  #
  # Note, we need to have "drgn" installed in order to run "pylint".
  # Thus, prior to running "pylint" we have to clone, build, and install
  # the "drgn" from source (there's no package currently available).
  #
  pylint:
    name: Pylint Checks
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.6'
      - run: ./.github/scripts/install-libkdumpfile.sh
      - run: ./.github/scripts/install-drgn.sh
      - run: python3 -m pip install pylint
      #
      # libkdumpfile doesn't install its Python files properly
      # as Github's python environment is a bit quirky. This
      # make pylint raise import errors when importing its API
      # from Python. Thus the `-d import-error` part.
      #
      - run: pylint -d import-error savedump
  yapf:
    name: Verify Coding Style
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.6'
      - run: python3 -m pip install yapf
      - run: yapf --diff --style google --recursive savedump
  #
  # Note, we need to have drgn and libkdumpfile installed in order to
  # run "mypy". Thus, prior to running "mypy" we have to clone, build,
  # and install them from source (there are no packages currently
  # available).
  #
  # Also note the following 2 things specific to mypy:
  # [1] We supply --allow-untyped-calls because even though drgn has
  #     stubs on typeshed now, there are still some untyped functions
  #     (mainly in the helper API).
  # [2] We supply --ignore-missing-imports to the tests package because
  #     libkdumpfile doesn't provide stubs on typeshed.
  #
  mypy:
    name: Type Checks
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.6'
      - run: ./.github/scripts/install-libkdumpfile.sh
      - run: ./.github/scripts/install-drgn.sh
      - run: python3 -m pip install mypy
      - run: python3 -m mypy --strict --allow-untyped-calls --ignore-missing-imports --show-error-codes -p savedump
  shfmt:
    name: Shell Script Format Checks
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: delphix/actions/shfmt@master
  #
  # This is the high-level job that depends in all of the
  # jobs of this workflow and it exists as a convenience
  # for 2 reasons:
  #
  # [1] Make Github Actions more flexible when it comes to
  #     Github's branch permissions with respect to PR
  #     checks. An example is requiring having the status
  #     of job "install (Python 2.6)" marked as successful
  #     before merging. If we decide to not run this test
  #     anymore by taking Python version 2.6 out of the
  #     "install" job matrix, we need to remember to go
  #     and also update our Github PR checks and uncheck
  #     the requirement of having "install (Python 2.6)"
  #     pass before merging. Otherwise, subsequent PRs
  #     will never be able to land through normal workflows.
  #
  # [2] Similarly to Github's configuration, this also
  #     makes the configuration of bors easier as we do
  #     not need to list every required job explicitly.
  #
  # Having a high-level job that depends on other jobs and
  # marking that as required in both Github Settings and
  # bors, makes it easy for us to make changes to the workflow
  # jobs themselves.
  #
  main-workflow-required-test-results:
    name: Main Workflow Required Test Results
    #
    # We want to the job to always run to return an exit
    # status, regardless if any of its dependencies failed
    # (in which case it will return error and won't just
    # be skipped). The reason that we want that is to
    # ensure that other automation like bors doesn't wait
    # on this forever.
    #
    if: ${{ always() }}
    needs:
      - install
      - pylint
      - yapf
      - mypy
      - shfmt
    runs-on: ubuntu-latest
    steps:
      - name: Check dependency results
        if: needs.install.result != 'success' ||
            needs.pylint.result != 'success' ||
            needs.yapf.result != 'success' ||
            needs.mypy.result != 'success' ||
            needs.shfmt.result != 'success'
        run: exit 1
      - name: Mark the job as aa success
        run: exit 0
